class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def maxPathSum(root):
    max_sum = float('-inf')  # Initialize to negative infinity

    def dfs(node):
        nonlocal max_sum
        if not node:
            return 0  # Base case: return 0 for null nodes

        # Recursively get the maximum path sum of left and right children
        left_max = max(dfs(node.left), 0)  # Ignore negative contributions
        right_max = max(dfs(node.right), 0)  # Ignore negative contributions

        # Current path sum includes the node itself and its left and right contributions
        current_path_sum = node.val + left_max + right_max

        # Update the global maximum path sum
        max_sum = max(max_sum, current_path_sum)

        # Return the maximum sum for the path including the node
        return node.val + max(left_max, right_max)

    dfs(root)  # Start DFS from the root
    return max_sum  # Return the global maximum path sum

